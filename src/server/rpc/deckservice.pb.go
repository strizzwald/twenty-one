// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deckservice.proto

package deckservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewDeckRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewDeckRequest) Reset()         { *m = NewDeckRequest{} }
func (m *NewDeckRequest) String() string { return proto.CompactTextString(m) }
func (*NewDeckRequest) ProtoMessage()    {}
func (*NewDeckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a25e7f8da02b51e, []int{0}
}

func (m *NewDeckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewDeckRequest.Unmarshal(m, b)
}
func (m *NewDeckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewDeckRequest.Marshal(b, m, deterministic)
}
func (m *NewDeckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDeckRequest.Merge(m, src)
}
func (m *NewDeckRequest) XXX_Size() int {
	return xxx_messageInfo_NewDeckRequest.Size(m)
}
func (m *NewDeckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDeckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewDeckRequest proto.InternalMessageInfo

type DeckResponse struct {
	Deck                 *Deck    `protobuf:"bytes,1,opt,name=deck,proto3" json:"deck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeckResponse) Reset()         { *m = DeckResponse{} }
func (m *DeckResponse) String() string { return proto.CompactTextString(m) }
func (*DeckResponse) ProtoMessage()    {}
func (*DeckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a25e7f8da02b51e, []int{1}
}

func (m *DeckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeckResponse.Unmarshal(m, b)
}
func (m *DeckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeckResponse.Marshal(b, m, deterministic)
}
func (m *DeckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeckResponse.Merge(m, src)
}
func (m *DeckResponse) XXX_Size() int {
	return xxx_messageInfo_DeckResponse.Size(m)
}
func (m *DeckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeckResponse proto.InternalMessageInfo

func (m *DeckResponse) GetDeck() *Deck {
	if m != nil {
		return m.Deck
	}
	return nil
}

type Deck struct {
	C                    []*Card  `protobuf:"bytes,1,rep,name=c,proto3" json:"c,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deck) Reset()         { *m = Deck{} }
func (m *Deck) String() string { return proto.CompactTextString(m) }
func (*Deck) ProtoMessage()    {}
func (*Deck) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a25e7f8da02b51e, []int{2}
}

func (m *Deck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deck.Unmarshal(m, b)
}
func (m *Deck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deck.Marshal(b, m, deterministic)
}
func (m *Deck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deck.Merge(m, src)
}
func (m *Deck) XXX_Size() int {
	return xxx_messageInfo_Deck.Size(m)
}
func (m *Deck) XXX_DiscardUnknown() {
	xxx_messageInfo_Deck.DiscardUnknown(m)
}

var xxx_messageInfo_Deck proto.InternalMessageInfo

func (m *Deck) GetC() []*Card {
	if m != nil {
		return m.C
	}
	return nil
}

type Card struct {
	Suit                 string   `protobuf:"bytes,1,opt,name=suit,proto3" json:"suit,omitempty"`
	Values               []uint32 `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	CardType             string   `protobuf:"bytes,3,opt,name=cardType,proto3" json:"cardType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Card) Reset()         { *m = Card{} }
func (m *Card) String() string { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()    {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a25e7f8da02b51e, []int{3}
}

func (m *Card) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Card.Unmarshal(m, b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Card.Marshal(b, m, deterministic)
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return xxx_messageInfo_Card.Size(m)
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetSuit() string {
	if m != nil {
		return m.Suit
	}
	return ""
}

func (m *Card) GetValues() []uint32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Card) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

func init() {
	proto.RegisterType((*NewDeckRequest)(nil), "NewDeckRequest")
	proto.RegisterType((*DeckResponse)(nil), "DeckResponse")
	proto.RegisterType((*Deck)(nil), "Deck")
	proto.RegisterType((*Card)(nil), "Card")
}

func init() {
	proto.RegisterFile("deckservice.proto", fileDescriptor_9a25e7f8da02b51e)
}

var fileDescriptor_9a25e7f8da02b51e = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x4f, 0x4f, 0x84, 0x30,
	0x14, 0xc4, 0x53, 0xa9, 0xa8, 0x0f, 0xf1, 0xcf, 0x33, 0x31, 0x15, 0x2f, 0xa4, 0x27, 0xb8, 0xf4,
	0x80, 0x17, 0xef, 0x7a, 0xe6, 0x50, 0xfd, 0x02, 0x58, 0xde, 0x81, 0x60, 0x04, 0x5b, 0x60, 0xb3,
	0xdf, 0x7e, 0xd3, 0x42, 0x36, 0xbb, 0xb7, 0xf9, 0x75, 0x3a, 0x79, 0x33, 0xf0, 0xd8, 0x92, 0xe9,
	0x1d, 0xd9, 0xa5, 0x33, 0xa4, 0x46, 0x3b, 0x4c, 0x83, 0x7c, 0x80, 0xbb, 0x9a, 0x76, 0x9f, 0x64,
	0x7a, 0x4d, 0xff, 0x33, 0xb9, 0x49, 0x96, 0x70, 0xbb, 0xa2, 0x1b, 0x87, 0x3f, 0x47, 0xf8, 0x02,
	0xdc, 0xc7, 0x04, 0xcb, 0x59, 0x91, 0x54, 0x97, 0x2a, 0x98, 0xe1, 0x49, 0xbe, 0x02, 0xf7, 0x84,
	0x4f, 0xc0, 0x8c, 0x60, 0x79, 0x14, 0xfc, 0x8f, 0xc6, 0xb6, 0x9a, 0x19, 0x59, 0x03, 0xf7, 0x12,
	0x11, 0xb8, 0x9b, 0xbb, 0x29, 0xe4, 0x6f, 0x74, 0xd0, 0xf8, 0x0c, 0xf1, 0xd2, 0xfc, 0xce, 0xe4,
	0xc4, 0x45, 0x1e, 0x15, 0xa9, 0xde, 0x08, 0x33, 0xb8, 0x36, 0x8d, 0x6d, 0xbf, 0xf7, 0x23, 0x89,
	0x28, 0xfc, 0x3f, 0x72, 0xf5, 0x0e, 0x89, 0x3f, 0xf6, 0xb5, 0xd6, 0xc7, 0x12, 0xae, 0xb6, 0xe2,
	0x78, 0xaf, 0xce, 0x27, 0x64, 0xa9, 0x3a, 0x5d, 0xf0, 0x13, 0x87, 0xa9, 0x6f, 0x87, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xee, 0x20, 0x6a, 0x47, 0xff, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeckServiceClient is the client API for DeckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeckServiceClient interface {
	NewDeck(ctx context.Context, in *NewDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error)
}

type deckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeckServiceClient(cc grpc.ClientConnInterface) DeckServiceClient {
	return &deckServiceClient{cc}
}

func (c *deckServiceClient) NewDeck(ctx context.Context, in *NewDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error) {
	out := new(DeckResponse)
	err := c.cc.Invoke(ctx, "/DeckService/NewDeck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeckServiceServer is the server API for DeckService service.
type DeckServiceServer interface {
	NewDeck(context.Context, *NewDeckRequest) (*DeckResponse, error)
}

// UnimplementedDeckServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeckServiceServer struct {
}

func (*UnimplementedDeckServiceServer) NewDeck(ctx context.Context, req *NewDeckRequest) (*DeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDeck not implemented")
}

func RegisterDeckServiceServer(s *grpc.Server, srv DeckServiceServer) {
	s.RegisterService(&_DeckService_serviceDesc, srv)
}

func _DeckService_NewDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).NewDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeckService/NewDeck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).NewDeck(ctx, req.(*NewDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeckService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DeckService",
	HandlerType: (*DeckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewDeck",
			Handler:    _DeckService_NewDeck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deckservice.proto",
}
